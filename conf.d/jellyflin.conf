server {
    # Remove map directives and keep SSL/HTTP configuration

    # Main SSL listener with HTTP/2
    listen 443 ssl;
    listen [::]:443 ssl;

    http2 on;
    http3 on;

    # Remove these obsolete directives
    # http2_max_field_size 16k;
    # http2_max_header_size 32k;
    # http2_max_requests 1000;
    # http2_idle_timeout 5m;

    # Add these modern replacements
    large_client_header_buffers 4 32k;
    keepalive_requests 1000;
    keepalive_timeout 300s;
    
    # HTTP/3 listener
    listen 443 quic;
    listen [::]:443 quic;
    
    server_name netflix.imnot.uk jellyflin.imnot.uk;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_early_data on;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;
    
    # HTTP/3 and QUIC settings
    quic_retry on;
    add_header Alt-Svc 'h3=":443"; ma=86400' always;

    # Global proxy settings
    client_max_body_size 50G;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Connection "";

    # Modern security headers
    add_header Content-Security-Policy "
        default-src 'self' https: data: blob:;
        script-src 'self' https://static.cloudflareinsights.com;
        style-src 'self' 'unsafe-inline';
        img-src 'self' data: blob: https:;
        connect-src 'self' wss: https:;
        font-src 'self' data:;
        media-src 'self' blob:;
        object-src 'none';
        frame-ancestors 'self';
        base-uri 'none';
        form-action 'self';
    " always;
    add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Add these proxy cache settings at server level
    proxy_cache_path /var/cache/nginx/jellyfin levels=1:2 keys_zone=jellyfin_cache:10m 
                     max_size=10g inactive=7d use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri$http_range";
    proxy_cache_valid 200 301 302 7d;
    proxy_cache_valid 404 5m;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_revalidate on;
    proxy_cache_lock on;
    proxy_cache_background_update on;
    proxy_cache_convert_head off;

    # Main location block
    location / {
        proxy_pass http://127.0.0.1:8096;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_buffering off;
        proxy_cache off;
        proxy_no_cache 1;
        
        add_header Cache-Control "no-store";
        
        # Modern CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "*" always;
    }

    # WebSocket handling
    location /socket {
        proxy_pass http://127.0.0.1:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Modify web interface location
    location /web/ {
        proxy_pass http://127.0.0.1:8096;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # Enable dynamic caching
        proxy_buffering on;
        proxy_cache thumbnails;
        
        # Honor cache-control headers
        proxy_ignore_headers Cache-Control;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        
        # Add cache status headers
        add_header X-Cache-Status $upstream_cache_status always;
        add_header X-Cached-On $upstream_http_date always;
        
        # Browser caching directives
        expires $upstream_http_expires;
        add_header Cache-Control $upstream_http_cache_control;
        
        # Cache bypass conditions
        set $bypass_cache 0;
        
        # Bypass cache for API calls and dynamic content
        if ($request_uri ~* "(/api/|/system/|/socket)") {
            set $bypass_cache 1;
        }
        
        proxy_no_cache $bypass_cache;
        proxy_cache_bypass $bypass_cache;

        # Vary header for proper cache invalidation
        add_header Vary "Accept-Encoding, Range";
    }

    # Remove or comment out other specific location blocks for static assets
    # They will now be handled by the main web location with dynamic caching
    
    # Keep media files location for large file handling
    location ~* \.(mp4|mkv|avi|mov)$ {
        proxy_pass http://127.0.0.1:8096;
        slice 1m;
        
        # Use same cache zone but with range support
        proxy_cache jellyfin_cache;
        proxy_cache_key "$host$uri$is_args$args$slice_range";
        proxy_set_header Range $slice_range;
        proxy_cache_valid 200 206 7d;
        proxy_force_ranges on;
        
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        
        proxy_http_version 1.1;
        proxy_set_header Connection "keep-alive";
        
        # Honor upstream cache headers
        expires $upstream_http_expires;
        add_header Cache-Control $upstream_http_cache_control;
        
        aio threads;
    }
}