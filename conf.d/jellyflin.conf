server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    http3 on;
    quic_retry on;
    ssl_early_data on;
    quic_gso on;
    server_name netflix.imnot.uk jellyfin.imnot.uk;

    client_max_body_size 50G;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_redirect off;

    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    send_timeout 600s;

    location / {
        proxy_pass http://127.0.0.1:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;

        # Enhanced caching strategy for main application
        proxy_cache app_cache;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_valid 200 1h;
        proxy_cache_bypass $http_pragma;
        proxy_cache_revalidate on;
        add_header Cache-Control "private, no-cache, must-revalidate, proxy-revalidate";
        add_header X-Cache-Status $upstream_cache_status;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://127.0.0.1:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    # Media files caching with optimized settings
    location ~* \.(mp4|mkv|avi|mov)$ {
        proxy_cache videos;
        proxy_cache_valid 200 7d;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_key "$host$request_uri$http_range";
        proxy_cache_min_uses 2;
        proxy_cache_lock on;
        proxy_cache_lock_timeout 5s;
        add_header Cache-Control "public, max-age=604800, stale-while-revalidate=86400";
        add_header X-Cache-Status $upstream_cache_status;
        expires 7d;
        aio threads=default;
    }

    # Static assets caching (CSS, JS, fonts)
    location ~* \.(css|js|woff2?|ttf|eot)$ {
        proxy_cache assets_cache;  # Changed from static_cache to assets_cache
        proxy_cache_valid 200 30d;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_min_uses 1;
        proxy_cache_revalidate on;
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header X-Cache-Status $upstream_cache_status;
        expires max;
    }

    # Image assets caching
    location ~* \.(jpg|jpeg|png|gif|ico|webp|svg)$ {
        proxy_cache images;  # Changed from images_cache to images
        proxy_cache_valid 200 3d;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_min_uses 1;
        proxy_cache_revalidate on;
        proxy_cache_lock on;
        add_header Cache-Control "public, max-age=259200, stale-while-revalidate=86400";
        add_header X-Cache-Status $upstream_cache_status;
        expires 3d;
        gzip_static on;
    }

}
